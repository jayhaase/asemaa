<!DOCTYPE html>
<html lang="en" class="h-full">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Sacred Tobacco Map</title>
        <link rel="stylesheet" href="{{ '/css/tailwind.css' | url }}">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
        <meta name="description" content="Learn about Ojibwe Asemaa and its historical trading routes across Turtle Island">
        <meta property="og:title" content="Asemaa Map">
        <meta
            property="og:description"
            content="Learn about Ojibwe Asemaa and its historical trading routes across Turtle Island">
        <meta
        property="og:type" content="website"> <!-- Add your site URL here -->
        <meta
        property="og:url" content=""> <!-- Add your site image here -->
        <meta property="og:image" content="">
    </head>
    <body class="h-full">
        <script>
            // Ensure locations is available globally and is an array
            window.locations = {{ locationsArray | dump | safe }};
            
            function sendHeight() {
                const mapContainer = document.querySelector('.map-container');
                const dropdown = document.querySelector('select');
                if (!mapContainer) return;  // Guard against missing element
                
                // Get the main container that includes both map and dropdown
                const mainContent = document.querySelector('main');
                if (!mainContent) return;
                
                // Get the actual content height and dropdown position
                const contentHeight = mainContent.getBoundingClientRect().height;
                const dropdownBottom = dropdown ? dropdown.getBoundingClientRect().bottom : 0;
                const mainTop = mainContent.getBoundingClientRect().top;
                
                // Calculate total height needed including dropdown and padding
                const totalHeight = Math.max(
                    contentHeight,
                    dropdownBottom - mainTop + 50  // Add 50px padding below dropdown
                );
                
                // Add buffer and ensure minimum height
                const finalHeight = Math.max(400, totalHeight);
                
                // Only send if height is reasonable and different from last sent
                if (finalHeight <= 2000 && finalHeight !== window.lastSentHeight) {
                    window.parent.postMessage('setHeight:' + finalHeight, '*');
                    window.parent.postMessage({ height: finalHeight }, '*');
                    window.lastSentHeight = finalHeight;
                }
            }

            // Initial height check with a delay to allow content to render
            setTimeout(sendHeight, 1000);

            // Periodic check every 5 seconds
            setInterval(sendHeight, 5000);

            // Check height on key events
            window.addEventListener('load', () => setTimeout(sendHeight, 1000));
            window.addEventListener('resize', () => {
                clearTimeout(window.resizeTimer);
                window.resizeTimer = setTimeout(sendHeight, 250);
            });
            
            // Check after Alpine loads
            document.addEventListener('alpine:initialized', () => {
                setTimeout(sendHeight, 1000);
            });

            // Check after any DOM changes (excluding height changes)
            const observer = new MutationObserver((mutations) => {
                // Filter out mutations that only change style/height
                const significantChange = mutations.some(mutation => 
                    mutation.type === 'childList' || 
                    (mutation.type === 'attributes' && mutation.attributeName !== 'style')
                );
                
                if (significantChange) {
                    clearTimeout(window.mutationTimer);
                    window.mutationTimer = setTimeout(sendHeight, 250);
                }
            });

            // Start observing when DOM is ready
            document.addEventListener('DOMContentLoaded', () => {
                observer.observe(document.body, { 
                    childList: true, 
                    subtree: true,
                    attributes: true,
                    attributeFilter: ['class', 'src', 'alt'] // Only observe specific attribute changes
                });
                setTimeout(sendHeight, 1000);
            });
        </script>
        <div class="min-h-full">
            <div x-data 
                 x-init="$store.locations.init(window.locations); 
                        if ('{{ turtleMapSettings.defaultLocationId }}') {
                            $store.locations.selectLocation('{{ turtleMapSettings.defaultLocationId }}');
                        }"
                 class="h-full">
                <main class="content font-body container mx-auto px-4 sm:px-6 lg:px-8">
                    <!-- Mobile and Desktop Layout Container -->
                    <div class="flex flex-col lg:block relative">
                        <!-- 1. Heading Area - Always at top -->
                        <div class="order-1 mb-8 lg:mb-0">
                            <div class="inline-flex items-center pl-0 pr-6 py-6">
                                <img src="{{ '/images/tobacco-plant.png' | url }}" alt="Leaf" class="w-16 object-contain mr-4">
                                <div>
                                    <h1 class="text-3xl font-heading">Beishigo Asemaa <span class="hidden lg:inline text-xl font-normal">- Tobacco First</span></h1>
                                    <blockquote class="mt-4 max-w-sm">
                                        <p class="text-lg leading-relaxed">"Traditional tobacco was our first gift from the Creator. These are the stories of the Asemaa seeds gifted to us."</p>
                                        <cite class="text-sm block text-gray-300 text-right ml-8">— Suzanne Nash</cite>
                                    </blockquote>
                                </div>
                            </div>
                        </div>

                        <!-- 2. Map Container - Second on mobile, centered on desktop -->
                        <div class="order-2 lg:ml-48 lg:-mt-16 xl:-mt-64 relative z-10">
                            <div class="relative map-container mb-16 lg:mb-0 lg:scale-[0.85] xl:scale-[0.75] lg:origin-center">
                                <div class="relative" style="z-index: 1;">
                                    {% include "partials/map-area.njk" %}
                                </div>
                            </div>
                        </div>

                        <!-- 3. Selector - Third on mobile, overlays map on desktop -->
                        <div class="order-3 -mt-8 mb-16 lg:mt-12 lg:mb-0 lg:absolute lg:top-48 lg:left-0 lg:z-30 flex justify-center lg:block relative z-20">
                            <div class="w-64">
                                <label for="location-select" class="block text-lg text-gray-100 mb-2">
                                    Begin the journey here…
                                </label>
                                <select
                                    id="location-select"
                                    class="w-full p-3 md:p-2 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#23545E] focus:border-transparent bg-white"
                                    @change="$store.locations.selectLocation($event.target.value);"
                                    x-bind:value="$store.locations.selectedLocation?.id || ''">
                                    <option value="">Select a Path</option>
                                    {% for location in locationsArray %}
                                        {% set indexInList = loop.index0 %}
                                        <option value="{{ location.id }}" data-index="{{ indexInList }}">{{ location.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>

                        <!-- 4. Circular Image - Fourth on mobile, overlays map on desktop -->
                        <div class="order-4 mb-16 lg:mb-0 lg:absolute lg:bottom-56 lg:right-[40px] xl:right-[160px] xl:bottom-72 lg:translate-x-0"
                             x-show="$store.locations.selectedLocation"
                             x-transition:enter="transition ease-out duration-300"
                             x-transition:enter-start="opacity-0"
                             x-transition:enter-end="opacity-100"
                             x-transition:leave="transition ease-in duration-300"
                             x-transition:leave-start="opacity-100"
                             x-transition:leave-end="opacity-0"
                             style="z-index: 20;">
                            <div class="relative w-64 h-64 md:w-72 md:h-72 lg:w-56 lg:h-56 xl:w-72 xl:h-72 mx-auto lg:mx-0 drop-shadow-glow">
                                <div class="absolute inset-0 bg-white rounded-full overflow-hidden border-4"
                                     style="border-color: #23545E;">
                                    <img 
                                        :src="$store.locations.selectedLocation?.imageUrl"
                                        :alt="$store.locations.selectedLocation?.name"
                                        class="w-full h-full object-cover">
                                    
                                    <!-- Learn More Button Overlay -->
                                    <template x-if="$store.locations.selectedLocation?.description || $store.locations.selectedLocation?.urlToAdditionalInformation">
                                        <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-60 py-3 px-4 flex justify-center items-center transition-all duration-300 hover:bg-opacity-80 cursor-pointer"
                                             @click="$store.locations.toggleDescriptionModal()">
                                            <span class="text-white font-medium text-sm tracking-wide">Learn More</span>
                                        </div>
                                    </template>
                                </div>
                            </div>
                        </div>

                        <!-- Description Modal -->
                        <div x-show="$store.locations.isDescriptionModalOpen" 
                             x-transition:enter="transition ease-out duration-300"
                             x-transition:enter-start="opacity-0"
                             x-transition:enter-end="opacity-100"
                             x-transition:leave="transition ease-in duration-300"
                             x-transition:leave-start="opacity-100"
                             x-transition:leave-end="opacity-0"
                             @click.away="$store.locations.toggleDescriptionModal()"
                             class="fixed inset-0 flex items-center justify-center p-4 z-50"
                             style="background-color: rgba(0,0,0,0.7);">
                            <div class="bg-[#4A7C59] border-4 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
                                 style="border-color: #23545E;"
                                 @click.stop>
                                <div class="p-6">
                                    <div class="flex justify-between items-start mb-4">
                                        <h3 class="text-xl font-semibold text-white" x-text="$store.locations.selectedLocation?.name"></h3>
                                        <button @click="$store.locations.toggleDescriptionModal()" class="text-white hover:text-gray-300">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>
                                    
                                    <!-- YouTube Video (shown when description exists) -->
                                    <template x-if="$store.locations.selectedLocation?.description">
                                        <div class="mb-6">
                                            <div class="relative pb-[56.25%] h-0 overflow-hidden rounded mb-4">
                                                <iframe 
                                                    :src="$store.locations.getYoutubeEmbedUrl()" 
                                                    class="absolute top-0 left-0 w-full h-full modal-video-iframe" 
                                                    frameborder="0"
                                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                                                    allowfullscreen>
                                                </iframe>
                                            </div>
                                        </div>
                                    </template>
                                    
                                    <div class="text-gray-200 [text-shadow:none]">
                                        <p x-text="$store.locations.selectedLocation?.description"></p>
                                        <template x-if="$store.locations.selectedLocation?.urlToAdditionalInformation">
                                            <a :href="$store.locations.selectedLocation?.urlToAdditionalInformation" 
                                               target="_blank" 
                                               class="block mt-6 text-white hover:text-gray-300 [text-shadow:none] underline flex items-center justify-center">
                                                <span class="text-gray-200">Learn Even More</span>
                                            </a>
                                        </template>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>
        <script defer src="{{ '/js/stores.js' | url }}"></script>
        <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    </body>
</html>